・step1 文字（BOMを除去、charに変換、改行を統一、行番号/列番号の管理）
    Vec<u8> -> Vec<Char>

    fn read() -> Option<char, (u64, u64)>
        charに変換する。
        BOMを除去する。
    fn mark() -> usize
    fn reset

・step2 ユニット（改行（行列）、インデント、アンインデント、文字（行列）、EOF（行列））
    Vec<Char> -> Vec<Unit>

    行末の空白を除去する。
    
・step3 構造化ソース（ブロック、ブロックタグ、ブロックタグヘッダー、インラインタグ、空白行、段落、テキスト）
    Vec<Unit> -> Block

    ネストの親にrawタグを書けないことを仕様にする。

    インラインタグもネストをテストしていない。
    省略形をテストする。

    警告の抑止は不要ではないか。

    警告の内容についてテストを見直す。

    省略形は内容を省略できないことにする。
    タグ名をただの文字列ではなくモデルにする。
    省略形かどうかを属性として保持する。

    警告の内容は見直しが必要。
        タグ以外のパースでは警告は何もしていない。

        タグの警告
            :があるが、次の文字が空白、改行、EOFなど。
                なし。
            :があるが、次の文字がタグには使えない文字。
            タグ名の途中で使えない文字が出現した。
                "There is an illegal character in tag name. '{}'"

        属性の警告
            特別な文字は引用符、]、カンマ。
            常に
                最後の]がない。
                    "']' is required."
            次の属性を待っている
                カンマが出現。
                    "There is an illegal character. {}"
        ブロックの警告
            なし。
        インラインの警告
            '}'がない。
                "'}' is required."

        属性のパースの仕方を整理する。
        次の属性待ち
            ']'で終了。
            カンマはNG。
            改行はスキップ。
            EOFはNG。
            他の文字だったら属性をパース。
                成功
                    重複はNG。
                    属性の直後に。
                失敗
                    警告はすでに設定済み。失敗で終了。
        属性の直後
            ']'で終了。
            カンマ => 次の属性待ち
            改行はスキップ。
            EOFはNG。
            他の文字はNG。

        内容のパースができなかったとき、エラーなのか内容なしのタグにするべきか判断できない。
        パース関数が正常な不適合と失敗を区別していないのが問題。
        警告を取り出して調べれば分かるが不親切。

        パース関数は処理結果とパースしたものの2つを戻り値にするべき？
        すでにResultという形で2つ返しているのだからいいのでは。
        警告もそれで返すことにして、
        ・パースできた：Some<>
        ・空としてパースできた：None
        ・警告あり：ParseError
            この時だけストリームをリセット。

        処理結果を表す
        どのタイミングで何が出現したらどの警告をするのか仕様として整理する。
        現状）
        属性
            不要なカンマがある。"It's a comma you don't need." => "There is an illegal character. {}"
            必要なカンマがない。"A comma is required."
            属性が重複している。"The attributes are duplicated."
            属性の形式が不正。"The attribute is malformed."
                属性のパースに失敗したときに親が設定しているが、子が設定しているものがあれば十分では。
            最後の]がない。"] is required." => "']' is required."
            属性名がない時だが、形式不正と同じでは？"There is no attribute name."
            無効にしてしまっているが必要？"A quoted attribute value is not closed."
            引用符なし属性に不正な文字。"{} cannot be written in the middle of an attribute value."
        ブロックタグヘッダー
            なし
        ブロックタグ
            （タグ名と属性は別でパース）
            タグ名か属性名の後に不正な文字。"There is an illegal character. '{}'"
        ブロック
            なし。
        インラインタグ
            内容がない（パース失敗）"There is no tag's contents."
            内容の終わりがない。"} is required."
        段落
            なし。
        シンボル
            なし。
        タグ名＆属性
            なし。

    インラインタグも内容なしを許容すべき。

    警告をローカライズ可能にする。
        短縮した英文をエラーコードとして扱う。
        今は文章そのままになっている。
        警告の出力はビルドプロセスとは別の処理なので後回し。
        
    
    警告に位置情報を追加。

・step5 DOM
    改行モードなどのために属性が必要で、それを保持するコンテキストを作る。

    trait Node {}

    struct Element {
        name: String,
        attributes: HashMap<String,String>,
        contents: Vec<Box<dyn Node>>,
    }

    struct Text {
        contents: String,
    }

・step6 HTML
