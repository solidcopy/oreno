・step1 文字（BOMを除去、charに変換、改行を統一、行番号/列番号の管理）
    Vec<u8> -> Vec<Char>

    fn read() -> Option<char, (u64, u64)>
        charに変換する。
        BOMを除去する。
    fn mark() -> usize
    fn reset

・step2 ユニット（改行（行列）、インデント、アンインデント、文字（行列）、EOF（行列））
    Vec<Char> -> Vec<Unit>

    SourceUnitStream
        fn read() -> Unit
        fn mark() -> Mark(u64, indent_level?)
        fn reset()

    行末の空白を除去する。
    
・step3 構造化ソース（ブロック、ブロックタグ、ブロックタグヘッダー、インラインタグ、空白行、段落、テキスト）
    Vec<Unit> -> Block

	parse_xxx関数の共通仕様
	・Ok, Mismatch, Warning, Errorのいずれかを返す。
	・Okになった時、読み込み位置は最後に消費したユニットの次にある。
    ・Mismatchになった時、読み込み位置は関数の呼び出し前に戻っている。
    ・Warningを返すのはその要素を書こうとしていると判断できて、それでも途中で間違っている時。
    ・Errorはあり得ない状況を検出した時に発生するもので、バグがなければ出ない。
    
    ・どのような状態で呼ばれるのか。
    ・何を要素に持つのか。
    ・どこまで消費するのか。
    ・何が出現したら終わるのか。
    ・どうなったらミスマッチ、警告、エラーになるか。
    
    再省略形
    ・文中で呼ばれる。
    ・開始が同じ省略記号2回でなければ不適合。
    ・インラインタグ、テキストを要素としてパースする。
    ・同じ省略記号2回が出現したら終了。
    ・生成する要素はインラインタグ。
    ・改行はただの文字とする。
    ・EOF、ブロック開始/終了が出現したらパースエラー。
    ・ビルドエラーは発生しない。
    
・step5 DOM
    改行モードなどのために属性が必要で、それを保持するコンテキストを作る。

    trait Node {}

    struct Element {
        name: String,
        attributes: HashMap<String,String>,
        contents: Vec<Box<dyn Node>>,
    }

    struct Text {
        contents: String,
    }

・step6 HTML
