・step1 文字（BOMを除去、charに変換、改行を統一、行番号/列番号の管理）
    Vec<u8> -> Vec<Char>

    fn read() -> Option<char, (u64, u64)>
        charに変換する。
        BOMを除去する。
    fn mark() -> usize
    fn reset

・step2 ユニット（改行（行列）、インデント、アンインデント、文字（行列）、EOF（行列））
    Vec<Char> -> Vec<Unit>

    行末の空白を除去する。
    
・step3 構造化ソース（ブロック、ブロックタグ、ブロックタグヘッダー、インラインタグ、空白行、段落、テキスト）
    Vec<Unit> -> Block

    ネストの親にrawタグを書けないことを仕様にする。

    インラインタグもネストをテストしていない。
    省略形をテストする。

    警告の抑止は不要ではないか。

    テストを見直す。
    ・結果。
    ・パース成功時の読み込み位置。
    ・警告の内容。
    セットアップも含めて簡単にテストする共通の処理を作る。

    警告をローカライズ可能にする。
        短縮した英文をエラーコードとして扱う。
        今は文章そのままになっている。
        警告の出力はビルドプロセスとは別の処理なので後回し。
    
    警告に位置情報を追加。

・step5 DOM
    改行モードなどのために属性が必要で、それを保持するコンテキストを作る。

    trait Node {}

    struct Element {
        name: String,
        attributes: HashMap<String,String>,
        contents: Vec<Box<dyn Node>>,
    }

    struct Text {
        contents: String,
    }

・step6 HTML
